<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | 王庆的博客]]></title>
  <link href="http://fevxie.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://fevxie.github.io/"/>
  <updated>2015-11-06T17:36:37+08:00</updated>
  <id>http://fevxie.github.io/</id>
  <author>
    <name><![CDATA[Qing Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pyhton Metaclass]]></title>
    <link href="http://fevxie.github.io/blog/2015/11/01/pyhton-metaclass/"/>
    <updated>2015-11-01T22:45:07+08:00</updated>
    <id>http://fevxie.github.io/blog/2015/11/01/pyhton-metaclass</id>
    <content type="html"><![CDATA[<h1>准备</h1>

<p>Python 中类的创建过程:</p>

<p>默认情况下， 通过使用type() 来创建类, 类的body部分会在一个新的namespace 中执行， 类名称会绑定type(name, bases, namespace)的执行结果</p>

<p>类的创建过程</p>

<h2>基本概念</h2>

<ul>
<li>元类
元类是用来创建类对象的对象，当创建一个类的时候，这个类的指定参数(要创建的类名称，父类，属性)的元类会被调用， 如果一个类没有指定元类， 默认的type元类会被调用。
当一个类被创建的时候， Python解释器会执行以下步骤：</li>
<li>获取要创建的类名称</li>
<li>获取要创建的类的所有父类</li>
<li>获取要创建的类的元类, Python 首先会检查此类有没有定义元类，如果定义了元类， 则会使用此元类来创建类， 如果没有定义，Python会查看此类的父类是否定义了元类，如果父类也没有定义元类，则会使用系统默认的type元类来创建类对象</li>
<li>获取要创建的类的属性并且存储在字典中</li>
<li>使用以上的信息通过调用metaclass(name_of_class, base_classes, attributes_dictionary)来创建类对象并且返回生成的类对象</li>
</ul>


<p>例如:
<code>python
classObject = type('ExampleClass', (object,), {})
</code></p>

<p>当type被调用的时候，type对象的<strong>call</strong> 方法会被调用， 此方法会调用type的<strong>new</strong>和<strong>init</strong>方法， <strong>new</strong> 方法创建类对象而<strong>init</strong>方法用来初始化此对象的属性， 下面是一个例子:</p>

<pre><code class="pytyon">class A(object):

    def __init__(self, data):
        self.data = data

    def getdata(self):
        return self.data * 3


class MyMeta(type):
    def __new__(cls, name, bases, attrs):
        print "cls: %s, name: %s, bases: %s, attrs: %s" % (
            cls, name, bases, attrs)

        attrs['get_data'] = A.__dict__['getdata']
        return type.__new__(cls, name, bases, attrs)

    def __init__(self, name, bases, attrs):
        print "self: %s, name: %s, bases: %s, attrs: %s" % (
            self, name, bases, attrs)
        return type.__init__(self, name, bases, attrs)


class Kls(object):
    __metaclass__ = MyMeta

    def __init__(self, data):
        self.data = data

    def printdata(self):
        print self.data

ik = Kls('arun')
ik.printdata()

print ik.get_data()
</code></pre>

<p>运行结果:</p>

<pre><code class="python">
&gt;&gt;&gt;cls: &lt;class '__main__.MyMeta'&gt;, name: Kls, bases: (&lt;type 'object'&gt;,), attrs: {'printdata': &lt;function printdata at 0x10fdd3f50&gt;, '__module__': '__main__', '__metaclass__': &lt;class '__main__.MyMeta'&gt;, '__init__': &lt;function __init__ at 0x10fdd3ed8&gt;}
self: &lt;class '__main__.Kls'&gt;, name: Kls, bases: (&lt;type 'object'&gt;,), attrs: {'printdata': &lt;function printdata at 0x10fdd3f50&gt;, '__module__': '__main__', 'get_data': &lt;function getdata at 0x10fdd3d70&gt;, '__metaclass__': &lt;class '__main__.MyMeta'&gt;, '__init__': &lt;function __init__ at 0x10fdd3ed8&gt;}
arun
arunarunarun
</code></pre>

<p>通常情况下， 我们只需要重写<strong>new</strong> 或者 <strong>init</strong> 中的一个方法， 下面的例子中我们用一个函数替代了元类:
```python
def meta_fun(name, bases, attrs):
    print &ldquo;name: %s, bases: %s, attrs: %s&rdquo; % (name, bases, attrs)
    nattrs = {&lsquo;mod:&rsquo; + key:attrs[key] for key in attrs}
    return type(name, bases, nattrs)</p>

<p>MyMeta = meta_fun</p>

<p>class Kls(object):
    <strong>metaclass</strong> = MyMeta</p>

<pre><code>def setd(self, data):
    self.data = data

def getd(self):
    return self.data
</code></pre>

<p>kls = Kls()
k.modsetd(&lsquo;arun&rsquo;)
print k.modgetd()
<code>   
运行结果:
</code>python</p>

<blockquote><blockquote><blockquote><p>name: Kls, bases: (<type 'object'>,), attrs: {&lsquo;setd&rsquo;: <function setd at 0x105601cf8>, &lsquo;getd&rsquo;: <function getd at 0x105601d70>, &lsquo;<strong>module</strong>&rsquo;: &lsquo;<strong>main</strong>&rsquo;, &lsquo;<strong>metaclass</strong>&rsquo;: <function meta_fun at 0x105601c08>}
arun
```</p></blockquote></blockquote></blockquote>

<p>除了修改类的父类和类的方法之外， 元类还可以修改类实例的创建过程，这是因为当我们实例化一个类对象的时候(ik = Kls()), 就好像调用这个类，不管什么时候我们调用一个对象的时候，这个对象的type对象的<strong>call</strong> 方法都会被调用，所以当我们实例化类的时候，他的元类的<strong>call</strong> 方法也会被调用， 我们可以通过下面的例子来测试:</p>

<pre><code class="python">class MyMeta(type):
    def __call__(cls, *args):
        print "MyMeta is called with cls: %s, args: %s" % (cls, args)
        instance = object.__new__(cls)
        instance.__init__(*args)
        return instace

class Kls(object):
    __metaclass__ = MyMeta

    def __init__(self, data):
        self.data = data

    def print_data(self):
        print self.data

ik = Kls('arun')
ik.print_data()
</code></pre>

<p>【待填坑】&hellip;</p>

<p>参考资料:
1. <a href="http://pythoncentral.io/how-metaclasses-work-technically-in-python-2-and-3/">How Metaclasses work technically in Python 2 and 3</a>
2. <a href="https://jakevdp.github.io/blog/2012/12/01/a-primer-on-python-metaclasses/">A Primer on Python Metaclasses</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 描述符]]></title>
    <link href="http://fevxie.github.io/blog/2015/10/29/python-descriptor/"/>
    <updated>2015-10-29T13:34:02+08:00</updated>
    <id>http://fevxie.github.io/blog/2015/10/29/python-descriptor</id>
    <content type="html"><![CDATA[<h2>基本概念</h2>

<ol>
<li><p>Descriptor Protocol(描述符协议)——描述符协议指的是签名如下的几个方法:</p>

<ul>
<li><p>descr.<strong>get</strong>(self, obj, type=None) &ndash;> value</p></li>
<li><p>descr.<strong>set</strong>(self, obj, value) &ndash;> None</p></li>
<li><p>descr.<strong>delete</strong>(self, obj) &ndash;> None</p></li>
</ul>
</li>
<li><p>Descriptor(描述符)——如果一个类定义了上述三个方法中的任何一个, 那么这个类的实例对象被称之为<strong>描述符</strong>, 描述符有以下几个特性:</p>

<ul>
<li><p>描述符可以通过描述符协议中定义的方法重写Python中默认的属性 查找顺序（参考【前言】部分), 解释一下：什么叫重写默认的属性查找顺序, 如果类实例调用的属性是一个描述符对象, Python 就不会按照上面所述的方式去查找此属性的值，而是调用描述符定义的函数来获取这个值, 后续会详细讲解这个过程在Python中是如何实现的</p></li>
<li><p>通常情况下, 描述符是作为一个对象的属性来进行访问的, 或者说描述符对象是绑定在对象的属性上的</p></li>
</ul>
</li>
<li><p>Data Descriptor(数据描述符) 和 non-data Descriptor（非数据描述符）
如果一个对象同时定义了<strong>get</strong>() 和 <strong>set</strong>() 方法,那么这个对象被成为数据描述符, 如果一个对象只定义了<strong>get</strong>() 方法， 那么这个对象被成为非数据描述符， 讲到这里，你可能会觉的非数据描述符就是只读属性，这个理解是错误的， 我们后续会讲数据描述符和非数据描述符的区别。</p></li>
</ol>


<p>如果我们要定义一个只读的数据描述符, 可以这么做:
* 同时定义<strong>get</strong>()和<strong>set</strong>()方法， 在<strong>set</strong>() 的实现中 raise 一个attributeError 异常</p>

<h2>对象属性查找顺序</h2>

<p>我们以一个小例子开始这一部分,假如我们有如下定义:
```python
class A(object):
    _name = &ldquo;fevxie&rdquo;</p>

<p>class B(A):
    _number = 1024</p>

<pre><code>def __init__(self, worker):
    self.worker = worker
</code></pre>

<p>a = A()
b = B(&ldquo;I&rsquo;m a worker&rdquo;)</p>

<p>print A.<strong>dict</strong>
print B.<strong>dict</strong>
print b.<strong>dict</strong>
print a.<strong>dict</strong>
```
输出结果:</p>

<pre><code>&gt;&gt;&gt; {'__dict__': &lt;attribute '__dict__' of 'A' objects&gt;, '__module__': '__main__', '__weakref__': &lt;attribute '__weakref__' of 'A' objects&gt;, '__doc__': None, '_name': 'fevxie'}

&gt;&gt;&gt; {'__module__': '__main__', '__doc__': None, '__init__': &lt;function __init__ at 0x1023d5cf8&gt;, '_number': 1024}

&gt;&gt;&gt;{'worker': "I'm a worker"}

&gt;&gt;&gt;{}
</code></pre>

<p>从输出结果我们得出以下结果:
* 类实例对象的<strong>dict</strong>字典里只会存储当前实例对象的属性
* 类对象的<strong>dict</strong>字典里存储当前类的属性</p>

<p>在Python中当我们调用一个对象(类对象或者实例对象)的属性的时候(obj.x),Python 按照如下的顺序来查找这个属性:</p>

<p>属性存储位置:</p>

<ul>
<li>[1]类实例的<strong>dict</strong>字典(存储类实例的属性)</li>
<li>[2]类对象的<strong>dict</strong>字典(存储类对象的属性)</li>
<li>[3]类父类(按照MRO顺序)的<strong>dict</strong>字典(存储父类对象的属性)</li>
</ul>


<p>属性查找的顺序:</p>

<p>如果是Python提供的内置属性, 系统直接返回, 如果不是内置属性</p>

<ul>
<li>类实例对象

<ul>
<li>在位置[2]中查找属性并且判断属性是不是数据描述符对象</li>
<li>在位置[3]中查找属性并且判断属性是不是数据描述符对象</li>
<li>在位置[1]中查找属性</li>
<li>在位置[2]中查找属性</li>
<li>在位置[3]中查找属性</li>
<li>在位置[2]中查找属性并且判断属性是不是非数据描述符对象</li>
<li>在位置[3]中查找属性并且判断属性是不是非数据描述符对象</li>
<li>抛出AttributeError异常</li>
</ul>
</li>
<li>类对象

<ul>
<li>在位置[2]查找属性并且判断是不是数据描述符对象</li>
<li>在位置[3]中查找属性并且判断是不是数据描述符对象</li>
<li>在位置[2]中查找属性</li>
<li>在位置[3]中查找属性</li>
<li>在位置[2]中查找属性并且判断是不是非数据描述符对象</li>
<li>在位置[3]中查找属性并且判断是不是非数据描述符对象</li>
<li>抛出AttributeError异常</li>
</ul>
</li>
</ul>


<p>从上面的步骤我们可以看到Python中属性查找的优先顺序为:</p>

<ul>
<li>数据描述符的优先级高于实例变量</li>
<li>实例变量的优先级高于非数据描述符</li>
<li>如果类重写了<strong>getattr</strong>()方法, 此方法的优先级最低</li>
</ul>


<h2>调用过程</h2>

<ul>
<li>描述符可以直接通过描述符对象来调用，例如: d.<strong>get</strong>(obj)</li>
<li>但是通常情况下, 最常用的调用方法是通过调用对象的属性来自动调用,例如：obj.d在obj对象的属性字典中按照上边所说的顺序查找d,如果Python发现d对象定义了<strong>get</strong>()方法则会调用此方法。</li>
<li>需要注意的一点是描述符属性只能定义在类对象上, 而不能定义在类实例对象上.</li>
</ul>


<p>调用过程取决于obj 是一个类实例对象还是一个类对象, 这两种情况下Python的处理逻辑是不一样的</p>

<ul>
<li><p>如果obj是一个类实例对象当调用b.x的时候Python会调用object.<strong>getattribute()</strong>方法, 此方法会将b.x 转换成 type(b).<strong>dict</strong>[&lsquo;x&rsquo;].<strong>get</strong>(b, type(b)).</p></li>
<li><p>如果obj是一个类对象, Python会调用type.<strong>getattribute()</strong>方法, 此方法会将B.x转换成B.<strong>dict</strong>[&lsquo;x&rsquo;].<strong>get</strong>(None, B).</p></li>
<li><p><strong>getattribute</strong> 方法</p></li>
</ul>


<p>Python中当读取对象的属性的时候, Python会自动调用此方法， 这个方法的定义为:
<code>python
    object.__getattribute__(self, name)
</code>
其中self 参数为调用属性的对象, name 为属性的名称</p>

<p>我们做一个小的例子:</p>

<pre><code class="pyton">class A(object):
    f = 1

class B(A):
    pass

object.__getattribute__(A, 'f') [1]
&gt;&gt;&gt;1
object.__getattribute__(B, 'f') [2]
&gt;&gt;&gt;AttributeError Traceback (most recent call last)
&lt;ipython-input-42-de76df798d1d&gt; in &lt;module&gt;()
----&gt; 1 object.__getattribute__(B, 'f')

AttributeError: 'type' object has no attribute 'f'

type.__getattribute__(B, 'f') [3]
&gt;&gt;&gt;1
type.__getattribute__(A, 'f') [4]
&gt;&gt;&gt;1
</code></pre>

<p>这里调用了两个不同的<strong>getattribute</strong>方法，一个是object 对象的, 一个是type对象的。从输出的结果可以看到，这两个方法的输出是不一样的。</p>

<p>那么什么时候使用object.<strong>getattribute</strong>(), 什么时候用type.<strong>getattribute</strong>()</p>

<p>我们知道类对象的type 值为type 对象
类实例对象的type 值为类对象</p>

<p>如果对象的type值为type 对象的时候, 我们需要调用type.<strong>getattribute()</strong>, 如果对象的type对象为类对象的时候， 我们需要调用object.<strong>getattribute()</strong></p>

<p>按照上面介绍的属性查找顺序，我们知道对于类实例对象，先在类对象中查找(如果是数据描述符)，然后在实例中查找， 然后会按照mro的顺序在父类中查找属性，这个查找过程是在object.<strong>getattribute()</strong>中来完成的， 因此object.<strong>getattribute()</strong> 首先在传进来第一个参数(例如: self, 当前实例的对象)中查找属性，然后在通过type(self).<strong>mro</strong>在所有的父类中查找。</p>

<pre><code class="python">&gt;&gt;&gt; type(B).__mro__
(&lt;class 'type'&gt;, &lt;class 'object'&gt;)
&gt;&gt;&gt; B.__mro__
(&lt;class '__main__.B'&gt;, &lt;class '__main__.A'&gt;, &lt;class 'object'&gt;)
</code></pre>

<p>对于类对象，首先在类对象自己的字典中查找属性， 然后在所有的父类中查找属性；
<code>
 type.__getattribute__()
</code></p>

<p>如果我们在类上使用<code>object.__getattribute__(B, 'f')</code>方法，这个时候Python 会先在B类中查找f属性，但是B类对象上是没有f属性的，Python会去<code>type(B).__mro__</code> 中查找f属性， 但是type(B)的<strong>mro</strong>为[type, object]也是没有f属性的，所以上面的程序会报错.</p>

<p>但是我们如果调用object.<strong>getattribute()</strong>, 按照类实例的查找顺序，首先</p>

<p>的实现类似于如下:
<code>python
def __getattribute__(self, key):
    v = object.__getattribute__(self, key)
    if hasattr(v, '__get__'):
        return v.__get__(None, self)
    return v
</code></p>

<p>【待填坑】&hellip;.</p>

<p>参考资料:</p>

<ul>
<li><a href="http://www.cafepy.com/article/python_attributes_and_methods/ch01s04.html">Two Kinds of Descriptors</a></li>
<li><a href="https://docs.python.org/2/howto/descriptor.html">Descriptor HowTo Guide</a></li>
<li><a href="https://docs.python.org/2/reference/datamodel.html#object.__getattribute__">Data model</a></li>
<li><a href="http://www.cafepy.com/article/python_attributes_and_methods/python_attributes_and_methods.html#attribute-search-summary">Attribute Search Summary</a></li>
<li><a href="http://stackoverflow.com/questions/12599972/descriptors-as-instance-attributes-in-python">Descriptors as instance attributes in python</a></li>
<li><a href="http://stackoverflow.com/questions/24150894/what-is-the-difference-between-type-getattribute-and-object-getattribute">What is the difference between type.<strong>getattribute</strong> and object.<strong>getattribute</strong>?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 方法解析顺序(MRO)]]></title>
    <link href="http://fevxie.github.io/blog/2015/10/28/python-mro/"/>
    <updated>2015-10-28T09:23:03+08:00</updated>
    <id>http://fevxie.github.io/blog/2015/10/28/python-mro</id>
    <content type="html"><![CDATA[<h2>概念</h2>

<p>Python MRO 定义了<strong>多继承</strong>类实例在调用类方法的时候的正确搜索路径。什么意思呢， 如果一个类有多个父类， 那么我们用这个类的实例调用类的方法的时候，Python是如何在当前类和父类中找到这个方法的呢？MRO 定义了一系列规则及算法来完成这个事情。</p>

<h2>MRO的历史</h2>

<p>MRO有两个版本， 这两个的分界线为Python 2.2,  在2.2(包括)之前Python只有一个MRO计算的算法，之后Python添加了一套新的算法(C3)来计算MRO， 这两个算法我们下面会详细解释。</p>

<h2>使用范围</h2>

<p>当我们看到【MRO的历史】部分的时候，我们会想是不是python 2.2 之后python都是用的是新的C3 算法， 之前都用的是老的算法，事实并不是这样的，为了保持Python 版本的向后兼容性，新的C3算法只会用在新式类(第一个父类继承了object类)。经典类(没有继承自object类)仍然使用来的MRO算法。举例来说:</p>

<pre><code class="python">
class A:
    pass


class B:
    pass


class C(A, B):
    pass
</code></pre>

<p>C 类的实例将会使用老的MRO算法来计算方法调用的顺序，但是如果将上面的代码修改成：</p>

<pre><code class="python ">
class A(object):
    pass


class B(object):
    pass
</code></pre>

<p>这时候，Python 将会使用新的C3 算法来计算。</p>

<h2>老版本的MRO算法：</h2>

<p>我们试一下下面的程序：</p>

<pre><code class="python">class A:
    def who_am_i(self):
        print "I am a A"

class B(A):
    def who_am_i(self):
        print "I am a B"

class C(A):
    def who_am_i(self):
        print "I am a C"

class D(B, C):
    def who_am_i(self):
        print "I am a D"

d1 = D()
d1.who_am_i()
</code></pre>

<p>输出结果:  I am a D</p>

<p>现在我们注释掉D类中的who_am_i 方法：</p>

<pre><code class="python">class D(B, C):
#    def who_am_i(self):
#        print "I am a D"
    pass
</code></pre>

<p>这个时候哪个方法会被调用呢？B 中的方法？ C中的方法还是A中的方法？我们来看看输出结果：</p>

<p>输出结果: I am a B（这个结果大家估计可以猜出来）</p>

<p>那么现在我们注释掉B类中的方法：</p>

<pre><code class="python">class B(A):
#    def who_am_i(self):
#        print "I am a B"
    pass
</code></pre>

<p>现在会执行哪个方法呢？大家可能会觉得C类中的方法会被调用， 因为C是D类的另外一个直接父类。
但是当我们执行程序以后发现输出结果是：</p>

<p>输出结果：  I am a A</p>

<p>在解释这个执行过程之前， 我们先把后续的测试做完。</p>

<p>现在我们将A类中的方法注释掉
```python
class A:</p>

<h1>def who_am_i(self):</h1>

<h1>print &ldquo;I am a A&rdquo;</h1>

<pre><code>pass
</code></pre>

<pre><code>
输出结果： I am a C

然后我们取消A类中的注释， 然后显式的指定A继承自object类
</code></pre>

<p>class A(object):
    def who_am_i(self):
        print &ldquo;I am a A&rdquo;
```</p>

<p>输出结果：I am a C</p>

<p>这个时候我们发现如果A不显式继承自object时的输出结果为 I am a A, 如果继承自object 输出结果则为I am a C</p>

<p>大家可能会发现当A不继承自object的时候， python先会执行A中的方法，如果继承自object的话则会先执行C中的方法。 这个就是我们下要介绍的来的MRO 算法。</p>

<p>如果一个类继承自多个父类，此类的实例调用一个方法的时候，Python会生成一个类列表用来搜索哪个类中的方法会被调用。这个算法是一个树型路由，算法的方法查找顺序为：</p>

<ul>
<li>沿着树深度搜索</li>
<li>从左到右去搜索</li>
</ul>


<p>具体的执行顺序为：</p>

<ol>
<li>先查找是否调用的方法在当前类实例的类中定义</li>
<li>如果不存在，则在第一个父类中去查找，然后去父类的父类中去找, 依次类推</li>
<li>如果第二步仍然没有找到调用的方法，则会查看当前类是否继承自另外一个父类，然后按照之前的顺序一次查找</li>
</ol>


<p>按照这个顺序在我们的例子中方法的查找顺序为： D, B, A, C, A
Python 规定搜索路径中的类只能出现一次， 所以最终的搜索的路径为: D, B, A, C</p>

<h2>新的MRO(C3) 算法</h2>

<p>开始之前我们需要做一些简单的约定， 接下来我会使用:</p>

<ol>
<li>类列表[C1, C2, &hellip;, CN]</li>
<li>用head 来代表类列表的第一个元素: head = C1</li>
<li>用tail 来代表类列表中的剩余部分:tail = [C2,&hellip;,CN]</li>
<li>如果一个列表中的第一个元素不存在于其他列表的tail部分, Python 认为这个head 就是一个good head.</li>
</ol>


<p>接下来我们我们详细解释MRO是如何工作的:</p>

<p>假设类C继承自B1,B2,&hellip;,BN,我们打算完成类C的线性化L[C], 规则是：
C的线性化结果为C加上所有父类线性化及所有父类列表进行merge运算的结果, 公式为：</p>

<p>L[C(B1&hellip;BN)] = C + merge(L(B1), &hellip;, L(BN), B1, &hellip;, BN)</p>

<p>如果C是object对象, Python 约定object线性化结果为:</p>

<p>L[object] = object</p>

<p>merge 运算的规则为:</p>

<p>获取merge中第一个list的head值, 例如: L[B1][0]; 如果此head是一个good head， 则添加head到C的列表中，然后从merge的lists中删除head，否则的话查找下一个list中的head，重复以上操作直到所有类被删除或者找不到一个good head。如果不能merge Python 2.3 则会拒绝创建类对象并且会raise一个异常.</p>

<p>如果C类只有一个父类(单继承)，merge 计算则非常简单, 例如：</p>

<p>L(C(B)) = C + merge(L(B), B) = C+ L[B]</p>

<p>下面我们来举例来完成多继承:</p>

<pre><code class="python">O = object

class F(O):
    pass

class E(O):
    pass

class D(O):
    pass

class C(D, F):
    pass

class B(D, E):
    pass

class A(B, C):
    pass
</code></pre>

<p>这个例子中类的继承图如下:</p>

<pre><code>                          6
                         ---
Level 3                 | O |                  (more general)
                      /  ---  \
                     /    |    \                      |
                    /     |     \                     |
                   /      |      \                    |
                  ---    ---    ---                   |
Level 2        3 | D | 4| E |  | F | 5                |
                  ---    ---    ---                   |
                   \  \ _ /       |                   |
                    \    / \ _    |                   |
                     \  /      \  |                   |
                      ---      ---                    |
Level 1            1 | B |    | C | 2                 |
                      ---      ---                    |
                        \      /                      |
                         \    /                      \ /
                           ---
Level 0                 0 | A |                (more specialized)
                           ---
</code></pre>

<p>类O、D、E、F的线性化非常简单:</p>

<pre><code class="python">L[O] = [object]

L[D] = [D, O]

L[E] = [E, O]

L[F] = [F, O]
</code></pre>

<p>下面我们来计算类B的线性化:</p>

<pre><code>L[B] = [B] + merge(L(D), L(E), [D, E])
     = [B] + merge([D, O], [E, O], [D,E]) 
</code></pre>

<p>按照merge 的规则, 我们可以看到D 是一个good head, 这个时我们可以得到如下结果:</p>

<pre><code>L[B] = [B, D] + merge([O], [E, O], [E])
</code></pre>

<p>接下来我们获取O 发现， O并不是一个good head, 因为O 在[E, O] 这个list的tail 部分中，这个时候我们跳过O元素， 然后我们继续获取E 发现它是一个good head, 这个时候我们将得到:
<code>
L[B] = [B, D, E, O]
</code></p>

<p>使用同样的过程我们可以得到C的线性化列表:</p>

<pre><code>L[C] = [C] + merge([D, O],[F, O], [D,F])
     = [C, D] + merge([O], [F, O], [F])
     = [C, D, F] + merge([O], [O])
     = [C, D, F, O]
</code></pre>

<p>A类的线性化列表:
<code>
L[A] = [A] + merge([B, D, E, O], [C, D, F, O], [B, C])
     = [A, B] + merge([D, E, O], [C, D, F, O], C)
     = [A, B, C] + merge([D, E, O], [D, F, O])
     = [A, B, C, D] + merge([E, O], [F, O])
     = [A, B, C, D, E] + merge(O, [F, O])
     = [A, B, C, D, E, F] + merge([O], [O])
     = A B C D E F O
</code></p>

<h2>后记</h2>

<p>我们了解了Python 的MRO 计算方法以后, 可以在实际的工作中发现如果每次都通过这样来计算的话非常的麻烦， 那么我们如何才能更快的获取到一个类的MRO 顺序呢， Python中提供了一个内置函数mro()可以帮我们快速的获取到这个结果, 例如: 我有一个A类, 通过调用A.mro() 我们会得到如下结果:
```</p>

<blockquote><blockquote><blockquote><p>A.mro()
(<class '__main__.A'>, <class '__main__.B'>, <class '__main__.E'>,
<class '__main__.C'>, <class '__main__.D'>, <class '__main__.F'>,
<type 'object'>)</p></blockquote></blockquote></blockquote>

<p>```</p>

<p>参考资料:</p>

<ol>
<li><a href="http://makina-corpus.com/blog/metier/2014/python-tutorial-understanding-python-mro-class-search-path">Python Tutorial: Understanding Python MRO - Class search path</a></li>
<li><a href="https://www.python.org/download/releases/2.3/mro/">The Python 2.3 Method Resolution Order</a></li>
<li><a href="https://en.wikipedia.org/wiki/C3_linearization">C3 linearization</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
